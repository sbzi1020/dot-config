{
    "console.log": {
        "prefix": ["cl"],
        "body": [
            "console.log($0)"
        ]
    },
    "new promise": {
        "prefix": ["np"],
        "body": [
            "new Promise((resolve, reject) => {",
            "   ${1: Your code here}",
            "   $0",
            "})"
        ]
    },
    "function with return": {
        "prefix": ["fn"],
        "body": [
            "() => {",
            "   $1",
            "   return ($0)",
            "}"
        ]
    },
    "State service define": {
        "prefix": ["state-service"],
        "body": [
            "import * as Rx from 'rxjs'",
            "import { startWith } from 'rxjs/operators'",
            "// import { BehaviorSubject } from 'rxjs'",
            "// import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject'",
            "",
            "",
            "export interface ${1:State service interface here} {",
            "    ${3:// State attributes here}",
            "}",
            "/** **/",
            "const initState: ${1:State service interface name here} = ({",
            "})",
            "",
            "// const stateSource: Rx.BehaviorSubject<${1:State service interface name here}> = new Rx.BehaviorSubject(initState);",
            "const stateSource: Rx.Subject<${1:State service interface name here}> = new Rx.Subject();",
            "",
            "let latestState: ${1:State service interface name here} | null = null;",
            "",
            "/** **/",
            "const emitNextState = (nextState: ${1:State service interface name here}) => {",
            "    latestState = nextState",
            "    stateSource.next(nextState)",
            "}",
            "",
            "/**",
            " * ",
            " */",
            "export const ${2:State service name here} = ({",
            "    /** **/",
            "    $state: stateSource.asObservable().pipe(startWith(initState)),",
            "",
            "    /** **/",
            "    getLatest: (): ${1:State service interface name here} | null => latestState,",
            "",
            "    // updateUsername: (userName: string) => stateSource.next({ ...stateSource.value, userName }),",
            "    $0",
            "})"
        ]
    },
    "function template": {
        "prefix": ["ff"],
        "body": [
            "() => {",
            "    $0",
            "}"
        ]
    },
    "<div> for TSX": {
        "prefix": ["div"],
        "body": [
            "<div>$0</div>"
        ]
    },
    "<div> for TSX with format": {
        "prefix": ["div-with-format"],
        "body": [
            "<div>",
            "    $0",
            "</div>"
        ]
    },
    "<p> for TSX": {
        "prefix": ["p"],
        "body": [
            "<p>$0</p>"
        ]
    },
    "<p> for TSX with format": {
        "prefix": ["p-with-format"],
        "body": [
            "<p>",
            "    $0",
            "</p>"
        ]
    },
    "<span> for TSX": {
        "prefix": ["span"],
        "body": [
            "<span>$0</span>"
        ]
    },
    "<span> for TSX with format": {
        "prefix": ["span-with-format"],
        "body": [
            "<span>",
            "    $0",
            "</span>"
        ]
    },
    "<a> for TSX": {
        "prefix": ["a"],
        "body": [
            "<a href=\"${1: Url link here}\">$0</a>"
        ]
    },
    "<button> for TSX": {
        "prefix": ["button"],
        "body": [
            "<button onClick={$0}>$1</button>"
        ]
    },
    "<img> for TSX": {
        "prefix": ["img"],
        "body": [
            "<img src={$0} />"
        ]
    },
    "easy tag": {
        "prefix": ["tt"],
        "body": [
            "<$1>",
            "    $0",
            "</$1>"
        ]
    }
}
