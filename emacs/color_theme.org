* Color theme settings

** Nerd icons

#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons)
#+END_SRC

After =nerd-icons= has been installed, you need to run this once:

Press =<Alt-x>= then type =nerd-icons-install-fonts= to install particular icon font until you can see the nerd icons!!!


** All-the-icons

Another option you can choose is =all-the-icons= (But I disabled at this momment, as I use =nerd-icons=).

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

After =all-the-icons= has been installed, you need to run this once:

Press =<Alt-x>= then type =all-the-icons-install-fonts= to install particular icon font until you can see the icons!!!


** Doom themes

This package includes a lot of color themes.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled

      ;; Load theme, pick the one you like
      ;;(load-theme 'doom-gruvbox t)
      ;;(load-theme 'doom-nord-aurora t)
      ;;(load-theme 'doom-one t)
      ;;(load-theme 'doom-solarized-dark t)
      (load-theme 'doom-solarized-light t)
      ;;(load-theme 'doom-pine t)
      ;;(load-theme 'doom-zenburn t)
      ;;(load-theme 'doom-laserwave t)
      ;;(load-theme 'doom-henna t)
      ;;(load-theme 'doom-xcode t)
      ;;(load-theme 'doom-lantern t)
      ;;(load-theme 'doom-miramare t)
      ;;(load-theme 'doom-old-hope t)

      ;; Enable flashing mode-line on errors
      ;;(doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      ;; (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
      (doom-themes-treemacs-config)
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config)
    )
#+END_SRC


*** How to customize any theme you're using???

Basically, you can use =describe-variable= and put your theme name there and `tab` to see what theme variable you can use, then pick any one of them to go to the help document.

After that, you can click the theme source code link and you're able to customize from the source code:)

For example, the current theme link in the theme variable help document, put your cursor to the =doom-solarized-light-theme.el= and press =RET=. Modify all colors you want and save, then reload:)

=doom-solarized-light-padded-modeline= is a variable defined in =doom-solarized-light-theme.el=.


** Doom modeline (status bar concept in =Vim=)

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :disabled
    :after doom-themes
    :init
        (setq doom-modeline-buffer-file-name-style 'truncate-from-project)
        ;; (setq nerd-icons-color-icons nil)
        (doom-modeline-mode 1)
  )
#+END_SRC



** Modus theme

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :disabled
    :init
    :config
        (load-theme 'modus-vivendi-tritanopia t)
        ;;(load-theme 'modus-vivendi t)
  )
#+END_SRC


** ef-theme

#+BEGIN_SRC emacs-lisp
  (use-package ef-themes
    :disabled
    :init
    :config
        (load-theme 'ef-cherie t)
        ;; (load-theme 'ef-deuteranopia-dark t)
        ;; (load-theme 'ef-elea-dark t)
  )
#+END_SRC



** Tron-legacy-theme

*** +This is the original version which I don't use anymore+

#+BEGIN_SRC emacs-lisp
  ;; (use-package tron-legacy-theme
  ;;    :init
  ;;    :config
  ;;        ;; Gloden cursor, only effects the 'GUI' mode
  ;;        (setq tron-legacy-theme-vivid-cursor t)

  ;;        ;; The foreground to be dimmed and comments to be brighter
  ;;        ;; (setq tron-legacy-theme-dark-fg-bright-comments t)

  ;;        ;; changes the background color to a dark gunmetal grey,
  ;;        ;; instead of the default pure black. It doesn't work, as I
  ;;        ;; set a solid background color in 'settings.org'!!!
  ;;        ;; (setq tron-legacy-theme-softer-bg t)

  ;;        (load-theme 'tron-legacy t)
  ;; )
#+END_SRC


*** This is my modified version

I modified the 'tron-legacy-theme' and place it in =~/.config/emacs/themes=.

Here are the steps to modify the setting on the fly:

1. Open =~/.config/emacs/themes/my-tron-legacy-theme.el= and change colors
   
2. Run =M-x byte-recompile-file= to re-generate the =~/.config/emacs/themes/my-tron-legacy-theme.elc=

3. In any =emacs= instance, run =(load-theme 'my-tron-legacy t)= to take affect.


#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

  ;; Gloden cursor, only effects the 'GUI' mode
  (setq tron-legacy-theme-vivid-cursor t)

  ;; The foreground to be dimmed and comments to be brighter
  ;; (setq tron-legacy-theme-dark-fg-bright-comments t)

  ;; changes the background color to a dark gunmetal grey,
  ;; instead of the default pure black. It doesn't work, as I
  ;; set a solid background color in 'settings.org'!!!
  ;; (setq tron-legacy-theme-softer-bg t)

  ;;(load-theme 'my-tron-legacy t)
#+END_SRC


** +My custom modeline+

*** ~mode-line-format~

~mode-line-format~ is the variable that you should set a formatted string to represent your custom mode line.

This is the default ~mode-line-format~ value:

#+BEGIN_SRC
  ;; ("%e" mode-line-front-space
  ;;  (:propertize
  ;;   ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
  ;;   display
  ;;   (min-width
  ;;    (5.0)))
  ;;  mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position evil-mode-line-tag
  ;;  (vc-mode vc-mode)
  ;;  "  " mode-line-modes mode-line-misc-info mode-line-end-spaces)
#+END_SRC


When =eglot= enabled, ~(eglot--mode-line-format)~ get called and add its extra info to the =mode-line-misc-info=. That said you SHOUL include =mode-line-misc-info= in your
custom =mode-line-format= if want the =eglot= to be shown.

#+BEGIN_SRC
  ;; (add-to-list 'mode-line-misc-info
  ;;              `(eglot--managed-mode (" [" eglot--mode-line-format "] ")))
#+END_SRC


*** How to customize =mode-line-format=

Here are the steps to customize your own mode line:

1. Use ~defvar~ to declare your own variables that will be used in the ~mode-line-format~ strintg value.

2. After you ~defvar~ your own variables, you have to use ~put~ to add the ~risky-local-variable~ property to it and set that property's value to ~t~!!!

3. Use ~(setq-default mode-line-format '())~ to customize your mode line and that's it:)


Here are some useful functions you will use to customize your ~mode-line-format~:

| Function name               | Description                                                                |
|-----------------------------+----------------------------------------------------------------------------|
| ~propertize~                  | Return a copy of STRING with text properties added, for example add        |
|                             | custom face (font) to the string.                                          |
| ~major-mode~                  | Symbol for current buffers major mode.                                     |
| ~symbol-name~                 | Return SYMBOL's name, a string.                                            |
| ~capitalize~                  | Convert argument to capitalized form and return that.                      |
| ~put~                         | Store SYMBOL's PROPNAME property with value VALUE.                         |
| ~defface~                     | Declare FACE (font settings) as a customizable face that defaults to SPEC. |
| ~mode-line-window-selected-p~ | ~t~ when updating the mode line for the active window                        |



*** My =mode-line-format=

Read the comment carefully to understand how it works:

#+BEGIN_SRC
    ;; -------------------------------------------------------------------------------
    ;; All custom faces (font settings)
    ;; -------------------------------------------------------------------------------
    (defface my-modeline-light-blue-font '((t :foreground "#ACE6FE" :inherit italic bold)) "Modeline light blue font")
    (defface my-modeline-blue-green-font '((t :foreground "#4BB5BE")) "Modeline blue-green font")
    (defface my-modeline-light-orange-font '((t :foreground "#DEB45B")) "Modeline light-orange font")
    (defface my-modeline-orange-font '((t :foreground "#FF9F1C")) "Modeline orange font")
    (defface my-modeline-yellow-font '((t :foreground "#FFE64D")) "Modeline yellow font")
    (defface my-modeline-light-red-font '((t :foreground "#f44747")) "Modeline light-red font")
    (defface my-modeline-light-green-font '((t :foreground "#BBF0EF")) "Modeline light-green font")
    (defface my-modeline-dark-green-font '((t :foreground "#5A7387")) "Modeline dark-green font")


    ;; -------------------------------------------------------------------------------
    ;; Override the default face for change mode line backgroundW
    ;; -------------------------------------------------------------------------------
    (set-face-attribute 'mode-line-active nil :background "#2F2F2F")
    (set-face-attribute 'mode-line-inactive nil :background nil)


    ;; -------------------------------------------------------------------------------
    ;; All modeline variables
    ;; -------------------------------------------------------------------------------

    ;;
    ;; 'my-modeline-major-mode' variable related
    ;;
    (defun my-get-major-mode()
      "Return 'major-mode' as a string."
      (string-replace "-mode" "" (symbol-name major-mode)))

    (defun my-get-major-mode-capitalize()
      "Return capitalized 'major-mode' as a string."
      (capitalize (string-replace "-mode" "" (symbol-name major-mode))))

    (defvar-local my-modeline-major-mode
      '(:eval
          (propertize (my-get-major-mode) 'face 'my-modeline-orange-font))
      "Mode line constructor to display major mode"
    )

    ;;
    ;; 'my-modeline-buffer-name' variable related
    ;;
    (defun my-get-current-name () 
       (if (mode-line-window-selected-p)
           (buffer-name)
           (format " %s" (buffer-name))
       )
    )

    (defvar-local my-modeline-buffer-name
      '(:eval
          (propertize (my-get-current-name) 'face 'my-modeline-blue-green-font))
      "Mode line constructor to display buffer name"
    )

    (defvar-local my-modeline-buffer-file-name
      '(:eval
          (propertize (format " %s" (buffer-file-name)) 'face 'my-modeline-dark-green-font))
      "Mode line constructor to display buffer name"
    )

    ;;
    ;; 'my-modeline-evil-state' variable related
    ;;
    (defun my-get-evil-state()
      "Return 'evil-state' as a string."
      (format " %s  " (upcase (symbol-name evil-state))))

    (defvar-local my-modeline-evil-state
      '(:eval
          (when (mode-line-window-selected-p)
             (propertize (my-get-evil-state) 'face 'my-modeline-dark-green-font)))
      "Mode line constructor to display current evil state"
    )


    ;;
    ;; 'my-modeline-git-branch' variable related
    ;;
    (defun my-get-git-branch-name()
       (format "%s %s" (nerd-icons-mdicon "nf-md-source_branch") (substring vc 5))
    )

    (defvar-local my-modeline-git-branch
      '(:eval
          (when (mode-line-window-selected-p)
              (when-let (vc vc-mode)
                  (propertize (my-get-git-branch-name) 'face 'my-modeline-yellow-font)
              ))
       )
    )

    ;;
    ;; 'my-modeline-flymake' variable related
    ;;
    (declare-function flymake--severity "flymake" (type))
    (declare-function flymake-diagnostic-type "flymake" (diag))

    ;; Based on `flymake--mode-line-counter'.
    (defun prot-modeline-flymake-counter (type)
      "Compute number of diagnostics in buffer with TYPE's severity.
    TYPE is usually keyword `:error', `:warning' or `:note'."
      (let ((count 0))
        (dolist (d (flymake-diagnostics))
          (when (= (flymake--severity type)
                   (flymake--severity (flymake-diagnostic-type d)))
            (cl-incf count)))
        (when (cl-plusp count)
          (number-to-string count))))

    (defun my-get-lsp-error-indicator()
      ;; (insert (nerd-icons-octicon "nf-oct-bug"))  2
      ;; (insert (nerd-icons-codicon "nf-cod-bug"))  2
      ;; (insert (nerd-icons-faicon "nf-fa-bug"))    2
      (nerd-icons-octicon "nf-oct-bug")
    )

    (defun my-modeline-flymake-error()
       (when-let (count (prot-modeline-flymake-counter (intern ":error")))
           (propertize
               (format " %s %s" (my-get-lsp-error-indicator) count)
               'face
               'my-modeline-light-red-font)
       )
    )

    (defun my-get-lsp-warning-indicator()
      ;; (insert (nerd-icons-octicon "nf-oct-copilot_warning"))  2
      ;; (insert (nerd-icons-codicon "nf-cod-warning"))          2
      ;; (insert (nerd-icons-faicon "nf-fa-warning"))            2
      (nerd-icons-faicon "nf-fa-warning")
    )

    (defun my-modeline-flymake-warning()
       (when-let (count (prot-modeline-flymake-counter (intern ":warning")))
           (propertize
               (format " %s %s" (my-get-lsp-warning-indicator) count)
               'face
               'my-modeline-yellow-font)
       )
    )

    (defun my-get-lsp-note-indicator()
      ;; (insert (nerd-icons-faicon "nf-fa-exclamation"))          2
      ;; (insert (nerd-icons-mdicon "nf-md-exclamation_thick"))   󱈸 2
      ;; (insert (nerd-icons-faicon "nf-fa-exclamation_circle"))   2
      (nerd-icons-faicon "nf-fa-exclamation_circle")
    )

    (defun my-modeline-flymake-note()
       (when-let (count (prot-modeline-flymake-counter (intern ":note")))
           (propertize
               (format " %s %s" (my-get-lsp-note-indicator) count)
               'face
               'my-modeline-dark-green-font)
       )
    )

    (defvar-local my-modeline-flymake
        `(:eval
          (when (and (bound-and-true-p flymake-mode)
                     (mode-line-window-selected-p))
            (list
             '(:eval (my-modeline-flymake-error))
             '(:eval (my-modeline-flymake-warning))
             '(:eval (my-modeline-flymake-note))
             )))
      "Mode line construct displaying `flymake-mode-line-format'.
    Specific to the current window's mode line.")


    ;;
    ;; 'my-modeline-misc-info' variable related
    ;;
    (defvar-local my-modeline-misc-info
        '(:eval
          (when (mode-line-window-selected-p)
            mode-line-misc-info))
      "Mode line construct displaying `mode-line-misc-info'.
    Specific to the current window's mode line.")


    ;; -------------------------------------------------------------------------------
    ;; Keep that in mind: Each mode line variable (insdie the 'mode-line-format') must have
    ;; the 'risky-local-variable' property and set to 't'!!!
    ;; -------------------------------------------------------------------------------
    (dolist (my-var '(my-modeline-major-mode
                      my-modeline-buffer-name
                      my-modeline-evil-state
                      my-modeline-git-branch
                      my-modeline-flymake
                                          my-modeline-misc-info))
      (put my-var 'risky-local-variable t)
    )



    ;; -------------------------------------------------------------------------------
    ;;
    ;; Set the 'mode-line-format' as default value.
    ;;
    ;; - If you use 'setq' here, then it only applies to the current local buffer, but you see
    ;; the instant effects.
    ;;
    ;; - If you use 'setq-default' here, then it applies to all buffersc, but you can't see
    ;; the instant effects until re-launch Emacs.
    ;; -------------------------------------------------------------------------------
    (setq-default mode-line-format
      '("%e"
        my-modeline-evil-state
        my-modeline-buffer-name
        "  "
        ;;(:eval (format "MODE: %s" (propertize (symbol-name major-mode) 'face 'warning)))
        my-modeline-major-mode
        "  "
        my-modeline-git-branch
        "  "
        my-modeline-flymake
        "  "
        my-modeline-misc-info
        )
    )
#+END_SRC


* How to customize every color

1. Open a buffer in the =mode= that you want to change the color and run ~describe-face~ to get all current buffer =face= (name) list.

2. Choose the =face= name and press =<return>= then you see all the font and color settings in the new buffer.

3. Change the =face= attribute settings for that particular =face=, for example =org-level-1=:

   #+begin_src emacs-lisp
     ;; Transparent background color
     ;;(set-face-attribute 'org-level-1 nil :background nil)

     ;; Background color
     ;;(set-face-attribute 'org-level-1 nil :background "olivedrab")

     ;; Font color
     ;;(set-face-attribute 'org-level-1 nil :foreground "olivedrab")
   #+end_src


   Example to set default font color:

   #+begin_src emacs-lisp
     ;; (set-face-attribute 'default nil :foreground "#ACE6FE")
   #+end_src


4. How to get the color string?

   Run ~list-color-display~, then pick name string:)


5. Optional, show color as background on the color string

   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode)
   #+END_SRC
   
